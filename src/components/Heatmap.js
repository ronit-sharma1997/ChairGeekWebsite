import React from 'react';
import * as d3 from 'd3';

export default class HeatMap extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            heatmap: []
        }
        this.myRef = React.createRef()

    }

    componentDidMount() {
        let hm = "0.30,0.38,0.45,0.50,0.53,0.55,0.56,0.56,0.57,0.57,0.57,0.58,0.59,0.59,0.60,0.59,0.59,0.59,0.59,0.60,0.61,0.62,0.64,0.65,0.66,0.67,0.68,0.68,0.67,0.65,0.62,0.57,0.43,0.46,0.49,0.51,0.52,0.53,0.53,0.53,0.53,0.54,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.62,0.63,0.64,0.65,0.67,0.68,0.68,0.69,0.70,0.70,0.69,0.68,0.66,0.63,0.59,0.52,0.52,0.53,0.53,0.53,0.52,0.52,0.52,0.52,0.52,0.53,0.53,0.54,0.56,0.57,0.59,0.62,0.64,0.66,0.67,0.68,0.69,0.70,0.70,0.71,0.71,0.71,0.70,0.69,0.67,0.65,0.62,0.58,0.57,0.56,0.55,0.54,0.53,0.53,0.52,0.52,0.52,0.52,0.53,0.54,0.55,0.57,0.60,0.62,0.65,0.68,0.69,0.70,0.71,0.71,0.71,0.71,0.71,0.71,0.70,0.69,0.68,0.66,0.64,0.61,0.60,0.58,0.57,0.56,0.55,0.54,0.54,0.53,0.53,0.53,0.53,0.54,0.55,0.57,0.60,0.63,0.67,0.69,0.71,0.71,0.71,0.71,0.71,0.71,0.70,0.70,0.70,0.70,0.69,0.68,0.66,0.63,0.61,0.60,0.59,0.58,0.57,0.57,0.56,0.55,0.55,0.54,0.54,0.55,0.56,0.58,0.61,0.64,0.68,0.70,0.71,0.72,0.71,0.70,0.70,0.70,0.70,0.70,0.70,0.70,0.70,0.69,0.68,0.63,0.62,0.62,0.61,0.61,0.60,0.59,0.58,0.58,0.57,0.56,0.56,0.56,0.57,0.59,0.62,0.65,0.68,0.71,0.72,0.72,0.71,0.70,0.69,0.69,0.69,0.69,0.70,0.71,0.71,0.71,0.70,0.62,0.63,0.63,0.63,0.63,0.62,0.62,0.61,0.60,0.59,0.58,0.58,0.57,0.58,0.60,0.63,0.66,0.69,0.71,0.72,0.71,0.70,0.69,0.68,0.68,0.68,0.69,0.70,0.71,0.72,0.73,0.72,0.62,0.63,0.64,0.64,0.64,0.64,0.63,0.63,0.62,0.61,0.60,0.59,0.59,0.60,0.61,0.64,0.67,0.70,0.72,0.72,0.71,0.70,0.68,0.67,0.67,0.68,0.69,0.71,0.72,0.74,0.74,0.74,0.62,0.63,0.64,0.65,0.65,0.65,0.64,0.64,0.63,0.62,0.61,0.61,0.60,0.61,0.63,0.65,0.68,0.71,0.73,0.73,0.72,0.70,0.68,0.67,0.68,0.69,0.70,0.72,0.74,0.75,0.76,0.75,0.63,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.63,0.63,0.62,0.62,0.62,0.62,0.64,0.66,0.69,0.72,0.74,0.74,0.73,0.71,0.69,0.69,0.69,0.70,0.72,0.74,0.75,0.77,0.77,0.76,0.66,0.65,0.64,0.64,0.63,0.63,0.63,0.63,0.63,0.62,0.62,0.62,0.63,0.63,0.65,0.68,0.71,0.73,0.75,0.75,0.74,0.73,0.71,0.71,0.71,0.72,0.74,0.76,0.77,0.78,0.78,0.77,0.69,0.66,0.64,0.63,0.62,0.61,0.61,0.61,0.62,0.62,0.62,0.63,0.63,0.65,0.66,0.69,0.72,0.74,0.76,0.76,0.75,0.74,0.73,0.73,0.73,0.75,0.76,0.78,0.79,0.80,0.79,0.77,0.73,0.68,0.64,0.62,0.60,0.60,0.60,0.60,0.61,0.62,0.63,0.63,0.64,0.66,0.67,0.70,0.72,0.74,0.76,0.76,0.76,0.75,0.75,0.75,0.76,0.77,0.78,0.80,0.81,0.81,0.79,0.76,0.77,0.70,0.65,0.62,0.60,0.59,0.59,0.60,0.61,0.62,0.63,0.64,0.65,0.67,0.68,0.70,0.72,0.74,0.75,0.76,0.76,0.76,0.76,0.76,0.77,0.78,0.80,0.81,0.81,0.81,0.79,0.75,0.82,0.73,0.67,0.63,0.60,0.60,0.60,0.61,0.62,0.63,0.65,0.66,0.67,0.68,0.69,0.70,0.71,0.73,0.74,0.74,0.75,0.75,0.76,0.76,0.78,0.79,0.80,0.81,0.81,0.80,0.78,0.74,0.86,0.76,0.69,0.64,0.62,0.61,0.61,0.62,0.63,0.65,0.66,0.67,0.68,0.69,0.69,0.70,0.71,0.71,0.72,0.72,0.73,0.74,0.75,0.76,0.78,0.79,0.80,0.81,0.81,0.79,0.76,0.72,0.90,0.79,0.72,0.66,0.63,0.62,0.62,0.63,0.65,0.66,0.68,0.69,0.69,0.70,0.70,0.70,0.70,0.70,0.70,0.71,0.72,0.73,0.75,0.76,0.78,0.79,0.80,0.80,0.80,0.78,0.75,0.71,0.94,0.83,0.74,0.69,0.65,0.64,0.64,0.65,0.66,0.67,0.69,0.69,0.70,0.70,0.70,0.70,0.70,0.70,0.70,0.71,0.72,0.73,0.74,0.76,0.77,0.78,0.79,0.79,0.78,0.77,0.74,0.70,0.96,0.85,0.77,0.71,0.67,0.65,0.65,0.65,0.66,0.67,0.68,0.69,0.70,0.70,0.71,0.71,0.71,0.71,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.78,0.78,0.77,0.76,0.73,0.70,0.98,0.87,0.79,0.73,0.69,0.67,0.65,0.65,0.65,0.66,0.67,0.68,0.69,0.70,0.71,0.72,0.72,0.73,0.74,0.74,0.75,0.76,0.76,0.77,0.77,0.77,0.77,0.77,0.76,0.75,0.73,0.71,0.98,0.89,0.81,0.75,0.71,0.67,0.66,0.65,0.65,0.65,0.66,0.67,0.69,0.70,0.72,0.73,0.75,0.76,0.77,0.77,0.78,0.78,0.78,0.78,0.78,0.77,0.77,0.76,0.75,0.75,0.74,0.73,0.98,0.89,0.82,0.76,0.72,0.68,0.66,0.65,0.64,0.64,0.65,0.67,0.69,0.71,0.73,0.75,0.77,0.78,0.79,0.80,0.81,0.81,0.80,0.80,0.79,0.78,0.77,0.76,0.75,0.75,0.75,0.75,0.97,0.89,0.82,0.77,0.72,0.69,0.67,0.65,0.65,0.65,0.66,0.67,0.69,0.72,0.74,0.76,0.78,0.80,0.81,0.82,0.82,0.82,0.82,0.81,0.80,0.79,0.77,0.76,0.75,0.75,0.75,0.76,0.95,0.88,0.82,0.77,0.73,0.70,0.68,0.67,0.66,0.67,0.68,0.69,0.71,0.73,0.75,0.77,0.78,0.80,0.81,0.82,0.83,0.83,0.83,0.83,0.82,0.80,0.79,0.77,0.76,0.76,0.76,0.77,0.93,0.86,0.81,0.76,0.73,0.71,0.69,0.69,0.69,0.70,0.71,0.72,0.74,0.76,0.77,0.77,0.78,0.79,0.79,0.81,0.82,0.83,0.84,0.85,0.84,0.83,0.81,0.79,0.78,0.77,0.77,0.78,0.90,0.84,0.79,0.75,0.73,0.72,0.71,0.71,0.72,0.73,0.75,0.76,0.77,0.78,0.78,0.78,0.78,0.77,0.78,0.79,0.81,0.83,0.85,0.87,0.86,0.85,0.83,0.81,0.79,0.78,0.77,0.78,0.88,0.82,0.77,0.75,0.73,0.73,0.73,0.74,0.75,0.77,0.78,0.80,0.80,0.81,0.80,0.79,0.77,0.76,0.76,0.77,0.80,0.84,0.87,0.89,0.89,0.88,0.86,0.84,0.81,0.79,0.78,0.78,0.85,0.80,0.76,0.74,0.73,0.74,0.75,0.76,0.78,0.80,0.81,0.83,0.83,0.83,0.82,0.79,0.77,0.75,0.75,0.77,0.80,0.84,0.88,0.91,0.91,0.91,0.89,0.86,0.84,0.81,0.79,0.78,0.82,0.78,0.76,0.74,0.74,0.75,0.76,0.78,0.80,0.82,0.84,0.85,0.85,0.84,0.83,0.80,0.78,0.76,0.76,0.78,0.81,0.86,0.90,0.93,0.94,0.93,0.91,0.89,0.86,0.83,0.80,0.78,0.80,0.78,0.76,0.76,0.76,0.77,0.78,0.80,0.81,0.83,0.84,0.85,0.85,0.85,0.84,0.82,0.80,0.79,0.79,0.81,0.84,0.88,0.92,0.95,0.96,0.95,0.93,0.91,0.88,0.84,0.81,0.79,0.79,0.78,0.78,0.78,0.78,0.79,0.79,0.80,0.81,0.82,0.83,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.85,0.87,0.90,0.93,0.96,0.97,0.98,0.97,0.95,0.92,0.89,0.86,0.83,0.80";
        let margin = { top: 30, right: 30, bottom: 50, left: 30 },
            width = 450 - margin.left - margin.right,
            height = 450 - margin.top - margin.bottom;
        // append the svg object to the div of the component
        let svg = d3.select(this.refs.heatmap)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");
        // create labels
        let yLabels = new Array(32).fill(0).map((_, i) => `${i}`).reverse()
        let xLabels = new Array(32).fill(0).map((_, i) => `${i}`)
        
        // build scales
        // Build X scales and axis:
        var x = d3.scaleBand()
            .range([0, width])
            .domain(xLabels)
            .padding(0.01);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))

        // Build X scales and axis:
        var y = d3.scaleBand()
            .range([height, 0])
            .domain(yLabels)
            .padding(0.01);
        svg.append("g")
            .call(d3.axisLeft(y));
        console.log(y)
        // Build color scale
        let vals = hm.split(",").map((val, _) => {
            return Math.floor(parseFloat(val) * 100)
        })
        console.log(vals)
        var myColor = d3.scaleLinear()
            .range(["white", "#69b3a2"])
            .domain([1, 100]);

        // Read data
        hm = hm.split(",").map((val, i) => {
            return {
                "x": i % 32,
                "y": Math.floor(i / 32),
                "val": parseFloat(val)
            }
        });
        console.log(hm)

        // Create svg
        svg.selectAll()
            .data(hm)
            .enter()
            .append("rect")
            .attr("x", function(d) {return x(d.x.toString())})
            .attr("y", function(d) {return y(d.y.toString())})
            .attr("width", x.bandwidth())
            .attr("height", y.bandwidth())
            .style("fill", function(d) {return myColor(Math.floor(d.val * 100))})

    }

    render() {
        return <div ref="heatmap" />;
    }
}